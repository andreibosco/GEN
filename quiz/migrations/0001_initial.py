# Generated by Django 3.0.3 on 2020-05-19 18:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
        ('videos', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MCAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('content', models.CharField(help_text='Enter the answer text that you want displayed', max_length=1000)),
                ('correct', models.BooleanField(default=False, help_text='Is this the correct answer?')),
                ('custom_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Multiple choice answer',
                'verbose_name_plural': 'Multiple choice answers',
                'ordering': ['custom_order'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('content', models.CharField(help_text='Enter the content that you want displayed.', max_length=1000, verbose_name='Content')),
                ('explanation', models.TextField(blank=True, help_text='Explanation to be shown after the question has been answered.')),
                ('custom_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['custom_order'],
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('sectionitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='courses.SectionItem')),
                ('show_score', models.BooleanField(default=False)),
                ('show_correct_answers', models.BooleanField(default=False)),
                ('attempts_max_number', models.PositiveIntegerField(default=1)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quizzes', to='courses.Course')),
                ('requirement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='quiz.Quiz')),
                ('video', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='quizzes', to='videos.VideoFile')),
            ],
            options={
                'verbose_name_plural': 'quizzes',
            },
            bases=('courses.sectionitem',),
        ),
        migrations.CreateModel(
            name='Likert',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
            ],
            options={
                'verbose_name': 'Likert question',
                'verbose_name_plural': 'Likert questions',
            },
            bases=('quiz.question',),
        ),
        migrations.CreateModel(
            name='MCQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
                ('multiple_correct_answers', models.BooleanField(default=False, help_text='Does this question have multiple correct answers             (allow user to select multiple answer items)?')),
            ],
            options={
                'verbose_name': 'Multiple choice question',
                'verbose_name_plural': 'Multiple choice questions',
            },
            bases=('quiz.question',),
        ),
        migrations.CreateModel(
            name='OpenEnded',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
            ],
            options={
                'verbose_name': 'Open ended question',
                'verbose_name_plural': 'Open ended questions',
            },
            bases=('quiz.question',),
        ),
        migrations.CreateModel(
            name='QuestionGroupHeader',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.Question')),
            ],
            options={
                'abstract': False,
            },
            bases=('quiz.question',),
        ),
        migrations.CreateModel(
            name='QuizScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='courses.Course')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('attempt_number', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='courses.Course')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Question attempt',
                'verbose_name_plural': 'Question attempts',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='questions', to='quiz.Quiz', verbose_name='Quiz'),
        ),
        migrations.CreateModel(
            name='OpenEndedAttempt',
            fields=[
                ('questionattempt_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.QuestionAttempt')),
                ('answer_content', models.TextField(blank=True, null=True, verbose_name='answer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.OpenEnded')),
            ],
            options={
                'verbose_name': 'Open ended attempt',
                'verbose_name_plural': 'Open ended attempts',
            },
            bases=('quiz.questionattempt',),
        ),
        migrations.CreateModel(
            name='MCQuestionAttempt',
            fields=[
                ('questionattempt_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.QuestionAttempt')),
                ('correct', models.NullBooleanField()),
                ('answer_content', models.CharField(max_length=1000, verbose_name='student answer')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.MCAnswer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.MCQuestion')),
            ],
            options={
                'verbose_name': 'Multiple choice questions attempt',
                'verbose_name_plural': 'Multiple choice questions attempts',
            },
            bases=('quiz.questionattempt',),
        ),
        migrations.AddField(
            model_name='mcanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='quiz.MCQuestion'),
        ),
        migrations.CreateModel(
            name='LikertAttempt',
            fields=[
                ('questionattempt_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='quiz.QuestionAttempt')),
                ('answer_content', models.PositiveIntegerField(blank=True, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='quiz.Likert')),
            ],
            options={
                'verbose_name': 'Likert attempt',
                'verbose_name_plural': 'Likert attempts',
            },
            bases=('quiz.questionattempt',),
        ),
        migrations.CreateModel(
            name='LikertAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('scale_min', models.PositiveIntegerField(default=1)),
                ('scale_max', models.PositiveIntegerField(default=5)),
                ('legend', models.TextField(blank=True, help_text='Legend for the likert scale values.')),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='quiz.Likert')),
            ],
            options={
                'verbose_name': 'Likert answer (scale definition)',
                'verbose_name_plural': 'Likert answers (scale definition)',
            },
        ),
    ]
